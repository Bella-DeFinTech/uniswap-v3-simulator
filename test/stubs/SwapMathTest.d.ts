/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SwapMathTestInterface extends ethers.utils.Interface {
  functions: {
    "computeSwapStep(uint160,uint160,uint128,int256,uint24)": FunctionFragment;
    "getGasCostOfComputeSwapStep(uint160,uint160,uint128,int256,uint24)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "computeSwapStep",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfComputeSwapStep",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeSwapStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfComputeSwapStep",
    data: BytesLike
  ): Result;

  events: {};
}

export class SwapMathTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SwapMathTestInterface;

  functions: {
    computeSwapStep(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sqrtQ: BigNumber;
      amountIn: BigNumber;
      amountOut: BigNumber;
      feeAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "computeSwapStep(uint160,uint160,uint128,int256,uint24)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sqrtQ: BigNumber;
      amountIn: BigNumber;
      amountOut: BigNumber;
      feeAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    getGasCostOfComputeSwapStep(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getGasCostOfComputeSwapStep(uint160,uint160,uint128,int256,uint24)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  computeSwapStep(
    sqrtP: BigNumberish,
    sqrtPTarget: BigNumberish,
    liquidity: BigNumberish,
    amountRemaining: BigNumberish,
    feePips: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    sqrtQ: BigNumber;
    amountIn: BigNumber;
    amountOut: BigNumber;
    feeAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "computeSwapStep(uint160,uint160,uint128,int256,uint24)"(
    sqrtP: BigNumberish,
    sqrtPTarget: BigNumberish,
    liquidity: BigNumberish,
    amountRemaining: BigNumberish,
    feePips: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    sqrtQ: BigNumber;
    amountIn: BigNumber;
    amountOut: BigNumber;
    feeAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  getGasCostOfComputeSwapStep(
    sqrtP: BigNumberish,
    sqrtPTarget: BigNumberish,
    liquidity: BigNumberish,
    amountRemaining: BigNumberish,
    feePips: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGasCostOfComputeSwapStep(uint160,uint160,uint128,int256,uint24)"(
    sqrtP: BigNumberish,
    sqrtPTarget: BigNumberish,
    liquidity: BigNumberish,
    amountRemaining: BigNumberish,
    feePips: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    computeSwapStep(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sqrtQ: BigNumber;
      amountIn: BigNumber;
      amountOut: BigNumber;
      feeAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "computeSwapStep(uint160,uint160,uint128,int256,uint24)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sqrtQ: BigNumber;
      amountIn: BigNumber;
      amountOut: BigNumber;
      feeAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    getGasCostOfComputeSwapStep(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfComputeSwapStep(uint160,uint160,uint128,int256,uint24)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    computeSwapStep(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeSwapStep(uint160,uint160,uint128,int256,uint24)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfComputeSwapStep(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfComputeSwapStep(uint160,uint160,uint128,int256,uint24)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeSwapStep(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeSwapStep(uint160,uint160,uint128,int256,uint24)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfComputeSwapStep(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGasCostOfComputeSwapStep(uint160,uint160,uint128,int256,uint24)"(
      sqrtP: BigNumberish,
      sqrtPTarget: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
